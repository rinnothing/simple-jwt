// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package schema

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Issues a pair of access and refresh tokens for given guid
	// (GET /auth/{guid})
	AuthorizeGUID(ctx echo.Context, guid string) error
	// Get user GUID by the access token
	// (GET /get)
	GetGUID(ctx echo.Context, params GetGUIDParams) error
	// Update a pair of access and refresh tokens
	// (POST /refresh)
	RefreshTokens(ctx echo.Context) error
	// Unauthorize user by access token
	// (POST /unauthorize)
	Unauthorize(ctx echo.Context, params UnauthorizeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthorizeGUID converts echo context to params.
func (w *ServerInterfaceWrapper) AuthorizeGUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "guid" -------------
	var guid string

	err = runtime.BindStyledParameterWithOptions("simple", "guid", ctx.Param("guid"), &guid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter guid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthorizeGUID(ctx, guid)
	return err
}

// GetGUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetGUID(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGUIDParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "access_token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("access_token")]; found {
		var AccessToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for access_token, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "access_token", valueList[0], &AccessToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_token: %s", err))
		}

		params.AccessToken = AccessToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter access_token is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGUID(ctx, params)
	return err
}

// RefreshTokens converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshTokens(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshTokens(ctx)
	return err
}

// Unauthorize converts echo context to params.
func (w *ServerInterfaceWrapper) Unauthorize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UnauthorizeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "access_token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("access_token")]; found {
		var AccessToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for access_token, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "access_token", valueList[0], &AccessToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_token: %s", err))
		}

		params.AccessToken = AccessToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter access_token is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Unauthorize(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/:guid", wrapper.AuthorizeGUID)
	router.GET(baseURL+"/get", wrapper.GetGUID)
	router.POST(baseURL+"/refresh", wrapper.RefreshTokens)
	router.POST(baseURL+"/unauthorize", wrapper.Unauthorize)

}
